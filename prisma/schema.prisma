datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id               String            @id @default(cuid())
  username         String
  email            String?           @unique
  emailVerified    DateTime?
  image            String?
  role             String
  companyName      String?           @unique
  hashedPassword   String
  address          String?
  phoneNumber      String?
  crated_at        DateTime          @default(now())
  updated_at       DateTime          @updatedAt
  accounts         Account[]
  sessions         Session[]
  products         Product[]
  activateTokens   ActivateToken[]
  vendorrequests   VendorRequest[]
  purchaseRequests PurchaseRequest[]
  orders           Order[]
  currentOrder     CurrentOrder?
  currentOrderId   String?
}

model Order {
  id         String    @id @default(cuid())
  created_at DateTime  @default(now())
  updated_at DateTime  @updatedAt
  products   Product[]
  User       User?     @relation(fields: [userId], references: [id])
  userId     String?
}

model CurrentOrder {
  id         String    @id @default(cuid())
  created_at DateTime  @default(now())
  updated_at DateTime  @updatedAt
  products   Product[]
  user       User      @relation(fields: [userId], references: [id])
  userId     String    @unique
}

model Product {
  id                String           @id @default(cuid())
  productName       String
  productPrice      String
  productQuantity   Int
  created_at        DateTime         @default(now())
  upadted_at        DateTime         @updatedAt
  productImage      String
  User              User?            @relation(fields: [userId], references: [id])
  userId            String?
  category          String
  PurchaseRequest   PurchaseRequest? @relation(fields: [purchaseRequestId], references: [id])
  purchaseRequestId String?
  Order             Order?           @relation(fields: [orderId], references: [id])
  orderId           String?
  CurrentOrder      CurrentOrder?    @relation(fields: [currentOrderId], references: [id])
  currentOrderId    String?
}

model ActivateToken {
  id           String    @id @default(cuid())
  token        String    @unique
  activated_at DateTime?
  created_at   DateTime  @default(now())
  updated_at   DateTime  @updatedAt
  User         User?     @relation(fields: [userId], references: [id])
  userId       String?
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model VendorRequest {
  id                 String   @id @default(cuid())
  created_at         DateTime @default(now())
  update_at          DateTime @updatedAt
  User               User?    @relation(fields: [userId], references: [id])
  userId             String?
  companyName        String?  @unique
  companyImage       String?
  companyEmail       String?  @unique
  companyPhoneNumber String?
  companyAddress     String?
}

model PurchaseRequest {
  id                  String    @id @default(cuid())
  customerEmail       String
  customerUsername    String
  customerAddress     String
  customerPhoneNumber String
  products            Product[]
  User                User?     @relation(fields: [userId], references: [id])
  userId              String?
}
